# Taken from epilande/vim-2015-snippets and tweaked a bit
# ES2015
snippet "c(onst)?" "const" br
const ${1} = ${2}
endsnippet

snippet "l(et)?" "let" br
let ${1} = ${2}
endsnippet

snippet req "Node import" b
const ${1} = require('${2:$1}')
endsnippet

snippet "i(mport|mp|m)?" "import" br
import ${1} from '${2}'
endsnippet

snippet imn "import a member of a module" b
import {${1}} from '${2}'
endsnippet

snippet ima
import * as ${1} from '${2}'
endsnippet

snippet imma
import { ${1} as ${2} } from '${3}'
endsnippet

snippet "e(xport|xp|x)?" "export"
export ${1:default }
endsnippet

snippet me "export"
module.exports = ${1}
endsnippet

snippet r "return"
return ${0:result}
endsnippet

snippet : "Object Value JS"
${1}: ${0},
endsnippet


snippet "\.(map|filter|forEach|reduce)" "Array method with an arrow function" r
.`!p snip.rv = match.group(1)`(${1} => {
	$2
})
endsnippet

snippet "\.(map|filter|forEach|reduce)=" "Array method with an arrow function inline" rA
.`!p snip.rv = match.group(1)`(${1} => $2)
endsnippet

snippet fn "Named function"
function ${1} (${2}) {
  ${3}
}
endsnippet

snippet :f "method: func(...) { ... }"
${1:key}: (${2}) => {
	$3
},
endsnippet

snippet :cf "class method func: func(...) { ... }"
${1:key} (${2}) {
	${3}
}
endsnippet

snippet :caf
${1:key} = (${2}) => {
	${3}
}
endsnippet

snippet => "Arrow function"
(${1:args}) => {
	$2
}
endsnippet

snippet =>> "Inline arrow function" A
(${1:args}) => $2
endsnippet

snippet c=> "Const function" bA
const ${1:name} = (${2:args}) => {
	$3
}
endsnippet

snippet c=>> "Const inline arrow function" bA
const ${1:name} => $2
endsnippet

snippet expf "Export function" b
export ${1:default }function ${2:name} ($3) {
	$4
}
endsnippet

snippet fun* "Generator"
function* ${1:name} ($2) {
	yield $3
}
endsnippet

snippet forof "For of loop" b
for (let ${1:value} of ${2:iterable}) {
	${3:$1}
}
endsnippet

snippet class "Class"
class ${1:Name} {
	constructor (${2:arg}) {
		$3
	}
	$4
}
endsnippet


snippet log "console.log(...)"
console.log(${1})
endsnippet

snippet err "console.error(...)"
console.error(${1})
endsnippet

snippet pt "React.proptype definition" b
${1}: PropTypes.${2}
endsnippet

snippet if "Simple if statement" b
if (${1}) {
  ${2}
}
endsnippet

snippet ifelse "if/else statement" b
if (${1}) {
  ${2}
} else {
  ${3}
}
endsnippet

snippet ifelseif "if/else if statement" b
if (${1}) {
  ${2}
} else if (${3}) {
  ${4}
}
endsnippet
